//nolint
syntax = "proto3";

package proto;
option go_package = "main/proto";

// Java Configuration
option java_multiple_files = true;
option java_outer_classname = "EV3Client";

// Motortypes
enum Type {
  l = 0;
  m = 1;
  s = 2; // For possible future needs - not used
}

enum Sensor {
  gyro = 0;
  us = 1; // Ultra sonic sensor
}

// Input ports
enum InPort {
  in1 = 0;
  in2 = 1;
  in3 = 2;
  in4 = 3;
}

// Output ports on EV3
enum OutPort {
  A = 0;
  B = 1;
  C = 2;
  D = 3;
}

// Functions that can be called through the interface
service Motors {
  rpc RunMotors(MultipleMotors) returns (StatusReply) {} // Takes an array. Usable for all amounts of motors at a time
  rpc StopMotors(MultipleMotors) returns (StatusReply) {}
  rpc Drive(DriveRequest) returns (StatusReply) {}
  rpc DriveWGyro(DriveRequest) returns (StatusReply) {}
  rpc Rotate(RotateRequest) returns (StatusReply) {}
  rpc RotateWGyro(RotateRequest) returns (StatusReply) {}
  rpc Grab(MultipleMotors) returns (StatusReply) {}
  rpc CollectRelease(MultipleMotors) returns (StatusReply) {}
}

// MultipleMotors reuses the message MotorRequest
// The 'repeated' keyword makes it an array of motors, which can be handled with standard array syntax
// Note that '1' is a tag, as the default value of repeated fields is empty
message MotorRequest {
  int32 motorSpeed = 1;
  Type motorType = 2; // E.g. "medium"
  OutPort motorPort = 3; // E.g. "A"
}

// Might need to out-phased at some point
message MultipleMotors {
  repeated MotorRequest motor = 1;
}

message RotateRequest {
  MultipleMotors motors = 1;
  int32 degrees = 2;
  int32 speed = 3;
}

message DriveRequest {
  MultipleMotors motors = 1;
  float distance = 2;
  int32 speed = 3;
}

message StatusReply {
  bool replyMessage = 1; // Success
}